{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"get",
				"GET"
			],
			[
				"r",
				"raw_sql_insert"
			],
			[
				"con",
				"conn"
			],
			[
				"pe",
				"pescores	statement"
			],
			[
				"raw",
				"raw_sql_insert	(global, instance)"
			],
			[
				"is",
				"iscores	statement"
			],
			[
				"ra",
				"raw_sql_insert	statement"
			],
			[
				"dec",
				"decision_list"
			],
			[
				"sql",
				"sql_snippet"
			],
			[
				"sq",
				"sql_snippet"
			],
			[
				"deci",
				"decision_list	statement"
			],
			[
				"decision",
				"decision_list"
			],
			[
				"filter",
				"filter_args"
			],
			[
				"de",
				"decision_list"
			],
			[
				"num",
				"num_of_photos	statement"
			],
			[
				"ph",
				"photo_decision_dict	(global, instance)"
			],
			[
				"fil",
				"filter_args"
			],
			[
				"user",
				"userid"
			],
			[
				"cu",
				"curr_pescores"
			],
			[
				"iter",
				"itertools	import"
			],
			[
				"pho",
				"photo_iscore_dict	statement"
			],
			[
				"i",
				"iteritems	function"
			],
			[
				"I",
				"Iscore"
			],
			[
				"def",
				"default_timer	statement"
			],
			[
				"re",
				"reach_equilibrium"
			],
			[
				"us",
				"user2"
			],
			[
				"fl",
				"flag_add_synthetic_data	statement"
			],
			[
				"ma",
				"max_score_index"
			],
			[
				"score",
				"score_2"
			],
			[
				"sc",
				"score_1"
			],
			[
				"u",
				"userid"
			],
			[
				"cl",
				"Claudio"
			],
			[
				"ta",
				"task"
			],
			[
				"iscore",
				"iscore_table"
			],
			[
				"redi",
				"redis_conn"
			]
		]
	},
	"buffers":
	[
		{
			"file": "app/__init__.py",
			"settings":
			{
				"buffer_size": 528,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from flask import render_template, request\nfrom app import app, db\nfrom sqlalchemy import *\nfrom flask import jsonify, abort\nfrom models import Users, Iscore, PEscore, Results\nfrom app import lorenzo, xiao, claudio\nfrom cac import CAC\nimport timeit\nimport itertools\n\n\ntasks = [\n    {\n        'id': 1,\n        'title': u'Buy groceries',\n        'description': u'Milk, Cheese, Pizza, Fruit, Tylenol', \n        'done': False\n    },\n    {\n        'id': 2,\n        'title': u'Learn Python',\n        'description': u'Need to find a good Python tutorial on the web', \n        'done': False\n    }\n]\n\n@app.route('/')\n@app.route('/index')\ndef index():\n    user = { 'nickname': '' } # fake user\n    return render_template(\"index.html\",\n        title = 'Home',\n        user = user)\n\n\n\n\n@app.route('/todo/api/v1.0/tasks', methods = ['GET'])\ndef get_tasks():\n    uid = request.args['uid']\n    return jsonify( { 'uid': uid } )\n\n\n\n@app.route('/todo/api/v1.0/tasks/<int:task_id>', methods = ['GET'])\ndef get_task(task_id):\n    task = filter(lambda t: t['id'] == task_id, tasks)\n    if len(task) == 0:\n        abort(404)\n    return jsonify( { 'task': task[0] } )\n\n@app.route('/api/v1.1/cac', methods = ['GET'])\ndef create_cac_task_2():\n    if 'uid' not in request.args:\n        abourt(404)\n    conn = db.engine.connect()\n    start = timeit.default_timer()\n    uid = request.args['uid']\n    rows = Iscore.query.filter_by(userid = uid).all()\n    pids = [row.photo for row in rows]\n    iscore_rows = Iscore.query.filter(Iscore.photo.in_(pids)).order_by(Iscore.photo).all()\n    photo_user_dict = {}\n    photo_iscore_dict = {}\n    for pid in pids:\n        photo_user_dict[pid] = [] \n        photo_iscore_dict[pid] = []\n    for row in iscore_rows:\n        photo_user_dict[row.photo].append(row.userid)\n        photo_iscore_dict[row.photo].append(row)\n\n    pescore_pairs = {}\n    filter_args = []\n    for value in photo_user_dict.itervalues():\n        user_pairs = list(itertools.permutations(value, 2))\n        for pair in user_pairs:\n            if pair not in filter_args:\n                filter_args.append(pair)\n    rows = PEscore.query.filter(tuple_(PEscore.user1, PEscore.user2).in_(filter_args)).all()\n    for row in rows:\n        if (row.user1, row.user2) not in pescore_pairs:\n            pescore_pairs[(row.user1, row.user2)] = row.score\n    photo_decision_dict = {}\n    filter_args = []\n    for pid in pids:\n        users = photo_user_dict[pid]\n        curr_iscores = photo_iscore_dict[pid]\n        curr_pescores = []\n        for pair in list(itertools.permutations(users,2)):\n            curr_pescores.append([pair[0], pair[1], pescore_pairs[pair]])\n        coordinator = CAC(curr_iscores, curr_pescores)\n        decisions = coordinator.reach_equilibrium()\n        photo_decision_dict[pid] = decisions\n        for userid in users:\n            filter_args.append((userid, pid))\n    Results.query.filter(tuple_(Results.userid, Results.photoid).in_(filter_args)).delete(synchronize_session=False)\n    db.session.commit()\n    # print \"writing the decisions\"\n    decision_list = [(str(userid), str(photoid), photo_decision_dict[photoid][userid]) for userid, photoid in filter_args]\n    raw_sql_insert = \"INSERT INTO Results (userid, photoid, decision) VALUES \"+str(decision_list)[1:-1]\n    conn.execute(raw_sql_insert)\n    stop = timeit.default_timer()\n    # print \"running time: \", stop-start\n    return jsonify( { 'uid': uid, 'status': 'success', 'running time': stop-start} ), 201\n\n\n@app.route('/api/v1.0/cac', methods = ['POST'])\ndef create_cac_task():\n    if not request.json or not 'uid' in request.json:\n        abort(400)\n    start = timeit.default_timer()\n    uid = request.json['uid']\n    rows = Iscore.query.filter_by(userid = uid).all()\n    pids = [row.photo for row in rows]\n\n    for pid in pids:\n        iscores = Iscore.query.filter_by(photo = pid).all()\n        participants = [iscore.userid for iscore in iscores]\n        pescores =[]\n        for fid in participants:\n            if fid != uid:\n                record1 = PEscore.query.filter_by(user1 = uid, user2 = fid).first()\n                record2 = PEscore.query.filter_by(user1 = fid, user2 = uid).first()\n                pescores.append([uid, fid, record1.score])\n                pescores.append([fid, uid, record2.score])\n        coordinator = CAC(iscores, pescores)\n        decisions = coordinator.reach_equilibrium()\n        for id in participants:\n            record = Results.query.filter_by(userid=id, photoid=pid).first()\n            if record:\n                record.decision = decisions[id]\n            else:\n                temp = models.Results(id, pid, decisions[id])\n                db.session.add(temp)\n        print decisions\n    db.session.commit()\n    stop = timeit.default_timer()\n    return jsonify( { 'uid': uid, 'status': 'success', 'running time': stop-start} ), 201\n\n\n@app.route('/todo/api/v1.0/tasks', methods = ['POST'])\ndef create_task():\n    if not request.json or not 'uid' in request.json:\n        abort(400)\n    uid = request.json['uid']\n    # pid = request.json['pid']\n\n    results = Iscore.query.filter_by(userid = uid).all()\n    pids = [result.photo for result in results]\n\n    for pid in pids:\n        iscores = Iscore.query.filter_by(photo = pid).all()\n\n    participants = [iscore.userid for iscore in iscores]\n    pescores =[]\n    for fid in participants:\n        score_1 = PEscore.query.filter_by(user1 = uid, user2 = fid).first()\n        score_2 = PEscore.query.filter_by(user1 = fid, user2 = uid).first()\n        pescores.append([uid, fid, score_1])\n        pescores.append([fid, uid, score_2])\n\n    coordinator = CAC(None, None)\n    decisions = coordinator.reach_equilibrium()\n\n\n    return jsonify( { 'pid': pid, 'decisions': decisions} ), 201\n\nif __name__ == '__main__':\n    print \"view.py\"\n\n\n",
			"file": "app/views.py",
			"file_size": 5792,
			"file_write_time": 1395285740000000,
			"settings":
			{
				"buffer_size": 5792,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nLaTeXing:\n--------\n\n  LaTeXing Plugin\n  \n  Thank you for installing the LaTeXing plugin for ST2!\n  \n  !!!! Please check LaTeXing3 for ST3, all the new feature are just going to be included in that version. !!!!\n  \n  To learn more about the features of this plugin, check the project website:\n  \n  http://www.latexing.com\n  \n  The documentation of LaTeXing is accessable via:\n  \n  http://docs.latexing.com (stable version)\n  http://docs.latexing.com/en/development (testing version)\n  \n  \n  Enjoy the work with LaTeXing!\n  Chris\n",
			"settings":
			{
				"buffer_size": 579,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"scratch": true
			}
		},
		{
			"contents": "import sys\nsys.path.append(\"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python\")\n\nfrom sqlalchemy import tuple_\nfrom app import app\nfrom app import db\nfrom app import views, modelsc          \nimport itertools\nfrom app import cac\nimport timeit\n\n\nUsers = views.Users\nIscore = views.Iscore\nPEscore = views.PEscore\nResults = models.Results\nuid = '1'\nconn = db.engine.connect()\n\n#delete\n# user = db.session.query(views.Users).filter(views.Users.id=='1').first()\n# db.session.delete(user)\n# db.session.commit()\n#delete all\n#views.Users.query.delete()\n\nflag_add_synthetic_data = True\nnum_of_users = 10\nnum_of_photos = 100\nids = [str(i) for i in range(1,num_of_users+1)]\nnames = ['u'+id for id in ids]\npids = ['p'+str(i) for i in range(1, num_of_photos+1)]\nif flag_add_synthetic_data:\n	print \"start resetting the database\"\n	#clear all table content\n	Users.query.delete()\n	Iscore.query.delete()\n	PEscore.query.delete()\n	Results.query.delete()\n	print \"begin\"\n	# users = zip(ids, names)\n	# raw_sql_insert = \"INSERT INTO users (id, name) VALUES \"+ str(users)[1:-1]\n	# conn.execute(raw_sql_insert)\n	# print \"finish inserting users\"\n	\n	# iscores = []\n	# for pid in pids:\n	# 	for userid in ids:\n	# 		iscores.append((str(userid), str(pid), 5, 5, 5, 5))	\n	# raw_sql_insert = \"INSERT INTO iscore (userid, photo, private, friends, fof, everyone) VALUES \"+str(iscores)[1:-1]\n	# # conn.execute(raw_sql_insert)\n	# print \"finish inserting iscores\"\n\n	# pescores = []\n	# for r in itertools.permutations(ids, 2):\n	# 	pescores.append(r[0], r[1], 0)\n	# raw_sql_insert = \"INSERT INTO PEscore (user1, user2, score) VALUES \"+str(pescores)[1:-1]\n	# conn.execute(raw_sql_insert)\n	# print \"finish inserting iscores\"\n	\n	for i in range(len(ids)):\n		u = Users(ids[i], names[i])\n		db.session.add(u)\n	for pid in pids:\n		for userid in ids:\n			temp = Iscore(userid, pid)\n			db.session.add(temp)\n\n	for r in itertools.permutations(ids, 2):\n		temp = PEscore(r[0], r[1])\n		db.session.add(temp)\n	db.session.commit()\n	print \"finish resetting database synthetic data.\"\n\nstart = timeit.default_timer()\nrows = Iscore.query.filter_by(userid = uid).all()\npids = [row.photo for row in rows]\niscore_rows = Iscore.query.filter(Iscore.photo.in_(pids)).order_by(Iscore.photo).all()\nphoto_user_dict = {}\nphoto_iscore_dict = {}\nfor pid in pids:\n	photo_user_dict[pid] = [] \n	photo_iscore_dict[pid] = []\nfor row in iscore_rows:\n	photo_user_dict[row.photo].append(row.userid)\n	photo_iscore_dict[row.photo].append(row)\n\npescore_pairs = {}\nfilter_args = []\nfor value in photo_user_dict.itervalues():\n	user_pairs = list(itertools.permutations(value, 2))\n	for pair in user_pairs:\n		if pair not in filter_args:\n			filter_args.append(pair)\nrows = PEscore.query.filter(tuple_(PEscore.user1, PEscore.user2).in_(filter_args)).all()\nfor row in rows:\n	if (row.user1, row.user2) not in pescore_pairs:\n		pescore_pairs[(row.user1, row.user2)] = row.score\nphoto_decision_dict = {}\nfilter_args = []\nfor pid in pids:\n	users = photo_user_dict[pid]\n	curr_iscores = photo_iscore_dict[pid]\n	curr_pescores = []\n	for pair in list(itertools.permutations(users,2)):\n		curr_pescores.append([pair[0], pair[1], pescore_pairs[pair]])\n	coordinator = cac.CAC(curr_iscores, curr_pescores)\n	decisions = coordinator.reach_equilibrium()\n	photo_decision_dict[pid] = decisions\n	for userid in users:\n		filter_args.append((userid, pid))\nResults.query.filter(tuple_(Results.userid, Results.photoid).in_(filter_args)).delete(synchronize_session=False)\ndb.session.commit()\nprint \"writing the decisions\"\ndecision_list = [(str(userid), str(photoid), photo_decision_dict[photoid][userid]) for userid, photoid in filter_args]\nraw_sql_insert = \"INSERT INTO Results (userid, photoid, decision) VALUES \"+str(decision_list)[1:-1]\nconn.execute(raw_sql_insert)\nstop = timeit.default_timer()\nprint \"running time: \", stop-start\n",
			"file": "debug.py",
			"file_size": 3814,
			"file_write_time": 1395240354000000,
			"settings":
			{
				"buffer_size": 3825,
				"line_ending": "Unix"
			}
		},
		{
			"file": "requirements.txt",
			"settings":
			{
				"buffer_size": 436,
				"line_ending": "Unix"
			}
		},
		{
			"file": "config.py",
			"settings":
			{
				"buffer_size": 657,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/models.py",
			"settings":
			{
				"buffer_size": 1356,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/cac.py",
			"settings":
			{
				"buffer_size": 1737,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 14:13:39) \n[GCC 4.0.1 (Apple Inc. build 5493)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> \nstart resetting the database\nbegin\nfinish resetting database synthetic data.\nwriting the decisions\nrunning time:  5.83845305443\n>>> >>> ",
			"settings":
			{
				"buffer_size": 338,
				"line_ending": "Unix",
				"name": "*REPL* [python]",
				"scratch": true
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"command_palette":
	{
		"height": 271.0,
		"selected_items":
		[
			[
				"P",
				"Package Control: Install Package"
			],
			[
				"Package",
				"Package Control: List Packages"
			],
			[
				"Pac",
				"Package Control: Remove Package"
			],
			[
				"Paca",
				"Package Control: List Packages"
			],
			[
				"Pakc",
				"Package Control: Remove Package"
			],
			[
				"client",
				"Git GUI Clients: Gitk"
			],
			[
				"git:com",
				"Git: Commit"
			],
			[
				"git:add",
				"Git: Add Current File"
			],
			[
				"git:di",
				"Git: Diff All"
			],
			[
				"git",
				"Git: Commit"
			],
			[
				"Pakcag",
				"Package Control: Install Package"
			],
			[
				"Git:",
				"Git: Status"
			],
			[
				"git:push",
				"Git: Push Tags"
			],
			[
				"Packa",
				"Package Control: Install Package"
			],
			[
				"vir",
				"SublimeREPL: Python - virtualenv"
			],
			[
				"subl",
				"SublimeREPL: Python - virtualenv"
			],
			[
				"Package con",
				"Package Control: Remove Package"
			],
			[
				"Pacage",
				"Package Control: Install Package"
			],
			[
				"git:st",
				"Git: Status"
			],
			[
				"Pa",
				"Package Control: Install Package"
			],
			[
				"Latex",
				"LaTeXTools: Jump to PDF"
			],
			[
				"late",
				"LaTeXTools: Reconfigure and migrate settings"
			],
			[
				"Package Control:in",
				"Package Control: Install Package"
			],
			[
				"Sub",
				"SublimeREPL: Python - IPython"
			],
			[
				"Su",
				"SublimeREPL: Python - IPython"
			],
			[
				"SUB",
				"SublimeREPL: Python"
			],
			[
				"Pak",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Pack",
				"Package Control: Install Package"
			],
			[
				"P ",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/xiaoqian/Library/Application Support/Sublime Text 2/Packages/LaTeXing/LaTeXing.sublime-settings",
		"/Users/xiaoqian/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/cac_python.sublime-project",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/db_create.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/app/cac.py",
		"/Users/xiaoqian/Library/Application Support/Sublime Text 2/Packages/User/SublimeREPL.sublime-settings",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/app/views.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/run-heroku.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/run.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/myfunc.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/Procfile",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/requirements.txt",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/rq_test.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/config.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/debug.py",
		"/Users/xiaoqian/Library/Application Support/Sublime Text 2/Packages/User/Git.sublime-settings",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/cac_python.sublime-workspace",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/.gitignore",
		"/Users/xiaoqian/Library/Application Support/Sublime Text 2/Packages/Git/Git.sublime-settings",
		"/Users/xiaoqian/Library/Application Support/Sublime Text 2/Packages/SublimeREPL/SublimeREPL.sublime-settings",
		"/Users/xiaoqian/Library/Application Support/Sublime Text 2/Packages/User/SublimeRope.sublime-settings",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/app/models.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/test.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/worker.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/utils.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/db_downgrade.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/hello.py",
		"/Users/xiaoqian/Library/Application Support/Sublime Text 2/Packages/SublimeREPL/SublimeREPL (OSX).sublime-settings",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/cac_python/app/data.py",
		"/Users/xiaoqian/Dropbox/Git/thesis/cover.tex",
		"/Users/xiaoqian/Dropbox/Git/thesis/abstract.tex",
		"/Users/xiaoqian/Dropbox/Git/thesis/mitthesis.cls",
		"/Users/xiaoqian/Dropbox/Git/thesis/chap1.tex",
		"/Users/xiaoqian/Dropbox/Git/thesis/contents.tex",
		"/Users/xiaoqian/Dropbox/Git/thesis/thesis.sublime-project",
		"/Users/xiaoqian/Dropbox/Git/thesis/lgrind.sty",
		"/Users/xiaoqian/Dropbox/Git/thesis/README.main",
		"/Users/xiaoqian/Dropbox/Git/thesis/README.md",
		"/Users/xiaoqian/Dropbox/Git/thesis/README.text",
		"/Users/xiaoqian/Dropbox/Git/thesis/README.bibliography",
		"/Users/xiaoqian/Dropbox/Git/thesis/main.log",
		"/Users/xiaoqian/Dropbox/Git/thesis/usepackages.tex",
		"/Users/xiaoqian/Dropbox/Git/thesis/main.aux",
		"/Users/xiaoqian/Dropbox/Git/thesis/biblio.tex",
		"/Users/xiaoqian/Dropbox/Git/thesis/appa.tex",
		"/Users/xiaoqian/Desktop/test.tex",
		"/Users/xiaoqian/Dropbox/Git/thesis/main.toc",
		"/Users/xiaoqian/Dropbox/Git/thesis/ch1.tex",
		"/Users/xiaoqian/Dropbox/Git/thesis/thesis.sublime-workspace",
		"/Users/xiaoqian/Dropbox/research/Collaborative Access Control/collaborative_decision_making/network.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/app/cac.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/app/__init__.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/Procfile",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/run-heroku.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/app/views.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/app/templates/index.html",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/test.py",
		"/Users/xiaoqian/Desktop/SublimeIPython-master/install.txt",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/db_repository/versions/001_migration.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/db_create.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/app/db_create.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/app/db_migrate.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/app/data.py",
		"/Users/xiaoqian/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/app/model.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/app/templates/untitled",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/run.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/view.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/__init__.py",
		"/Users/xiaoqian/Desktop/Flask-Heroku-RQify-0.2/flask_rqify.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/utils.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/worker.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/hello.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/myfunc.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/rq_test.py",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/requirements.txt",
		"/Users/xiaoqian/Dropbox/research/Web_codes/Workspace/helloflask/.gitignore",
		"/Users/xiaoqian/Desktop/hello.py"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"views.Users",
			"h",
			"ven",
			"\\MI",
			"\\MIT"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app/__init__.py",
					"settings":
					{
						"buffer_size": 528,
						"regions":
						{
						},
						"selection":
						[
							[
								494,
								494
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 64.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/views.py",
					"settings":
					{
						"buffer_size": 5792,
						"regions":
						{
						},
						"selection":
						[
							[
								3041,
								3041
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"settings":
					{
						"buffer_size": 579,
						"regions":
						{
						},
						"selection":
						[
							[
								579,
								579
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "debug.py",
					"settings":
					{
						"buffer_size": 3825,
						"regions":
						{
						},
						"selection":
						[
							[
								204,
								204
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "requirements.txt",
					"settings":
					{
						"buffer_size": 436,
						"regions":
						{
						},
						"selection":
						[
							[
								226,
								226
							]
						],
						"settings":
						{
							"codeintel": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "config.py",
					"settings":
					{
						"buffer_size": 657,
						"regions":
						{
						},
						"selection":
						[
							[
								102,
								102
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "app/models.py",
					"settings":
					{
						"buffer_size": 1356,
						"regions":
						{
						},
						"selection":
						[
							[
								521,
								552
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 286.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "app/cac.py",
					"settings":
					{
						"buffer_size": 1737,
						"regions":
						{
						},
						"selection":
						[
							[
								770,
								770
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 551.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 8,
					"settings":
					{
						"buffer_size": 338,
						"regions":
						{
						},
						"selection":
						[
							[
								338,
								338
							]
						],
						"settings":
						{
							"auto_complete": true,
							"auto_indent": false,
							"detect_indentation": false,
							"gutter": false,
							"history_arrows": true,
							"indent_subsequent_lines": false,
							"line_numbers": false,
							"repl": true,
							"repl_external_id": "python",
							"repl_id": "65375b6539a046a7855e9b80cac1a072",
							"repl_restart_args":
							{
								"autocomplete_server": true,
								"cmd":
								[
									"/Users/xiaoqian/.virtualenvs/venv/bin/python",
									"-u",
									"${packages}/SublimeREPL/config/Python/ipy_repl.py"
								],
								"cwd": "$file_path",
								"encoding": "utf8",
								"extend_env":
								{
									"PATH": "/Users/xiaoqian/.virtualenvs/venv/bin",
									"PYTHONIOENCODING": "utf-8",
									"SUBLIMEREPL_ACTIVATE_THIS": "/Users/xiaoqian/.virtualenvs/venv/bin/activate_this.py"
								},
								"external_id": "python",
								"syntax": "Packages/Python/Python.tmLanguage",
								"type": "subprocess"
							},
							"repl_sublime2": true,
							"smart_indent": false,
							"spell_check": false,
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			0.621575011484,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 129.0
	},
	"output.git":
	{
		"height": 62.0
	},
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"ab",
				"abstract.tex"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 137.0,
	"status_bar_visible": true
}
